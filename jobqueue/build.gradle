import java.util.regex.Pattern

apply plugin: 'com.android.library'

Properties releaseConfig = new Properties()
File releaseFile = new File("${projectDir}/releaseConfig.properties")
if (releaseFile.exists()) {
    releaseConfig.load(new FileInputStream(releaseFile))
}
// for jitpack
group='com.github.yigit'
ext.releaseConfig = releaseConfig

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.3"
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.easytesting:fest-util:1.2.5'
    testImplementation 'org.easytesting:fest-reflect:1.4.1'
    testImplementation 'org.mockito:mockito-core:2.7.13'

    implementation 'com.squareup.okio:okio:1.8.0'

    // use an old version since we only need a few util classes that were already there for a long
    // time. If app depends on a newer one, gradle will pick it for us.
    //noinspection GradleDependency
    // remove when gms moves to individual libraries
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    // build tools does not allow making this provided so we make it optional when pom is created
    api 'com.google.android.gms:play-services-gcm:17.0.0'
}

android {
    compileSdkVersion 29
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            testCoverageEnabled = false
        }
    }

    defaultConfig {
        minSdkVersion 14
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-Xmx2000m', '-XX:+HeapDumpOnOutOfMemoryError', "-XX:HeapDumpPath=${System.env.CIRCLE_ARTIFACTS == null ? "." : System.env.CIRCLE_ARTIFACTS}/oom.hprof"
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }
}

//READ VERSION NAME
def manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
def manifestText = manifestFile.getText()
def matcher = pattern.matcher(manifestText)
matcher.find()
def manifestVersionName = matcher.group(1)
println "version name:${manifestVersionName}"

//afterEvaluate { project ->
//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                beforeDeployment {
//                    MavenDeployment deployment -> signing.signPom(deployment)
//                }
//                println "ossr username: ${releaseConfig.ossrhUsername}"
//
//                pom.artifactId = 'android-priority-jobqueue'
//
//
////                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
////                    authentication(userName: releaseConfig.ossrhUsername, password: releaseConfig.ossrhPassword)
////                }
//                snapshotRepository(url: mavenLocal().url) {
//
//                }
//
//                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
//                    authentication(userName: releaseConfig.ossrhUsername, password: releaseConfig.ossrhPassword)
//                }
//
//                pom.project {
//                    modelVersion '4.0.0'
//                    groupId 'com.birbit'
//                    artifactId 'android-priority-jobqueue'
//                    packaging 'jar'
//                    name 'Android Priority Job Queue'
//                    version manifestVersionName
//                    description 'a Job Queue specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.'
//                    url 'https://github.com/yigit/android-priority-jobqueue'
//
//                    parent {
//                        groupId 'org.sonatype.oss'
//                        artifactId 'oss-parent'
//                        version 7
//                    }
//
//                    scm {
//                        connection 'scm:git:git@github.com:yigit/android-priority-jobqueue.git'
//                        developerConnection 'scm:git:git@github.com:yigit/android-priority-jobqueue.git'
//                        url 'git@github.com:yigit/android-priority-jobqueue.git'
//                    }
//
//                    licenses {
//                        license {
//                            name 'The MIT License (MIT)'
//                            url 'http://opensource.org/licenses/MIT'
//                            distribution 'repo'
//                        }
//                    }
//
//                    developers {
//                        developer {
//                            id "yigit"
//                            name "Yigit Boyar"
//                        }
//                    }
//                }
//                pom.whenConfigured { MavenPom pom ->
//                    pom.dependencies.each {
//                        if (it.artifactId == 'play-services-gcm') {
//                            it.optional = true
//                            it.scope = "provided"
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    signing {
//        required { gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }
//}

task testLint(type : Exec) {
    workingDir project.projectDir
    // SET ANDROID_LINT_JARS ENV VARIABLE
    commandLine 'lint', '.', '--sources', 'src/test/java', '--disable', 'InlinedApi,AllowBackup,MissingApplicationIcon,LintError,NOTIFY_ON_OBJECT'
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

//    classDirectories = fileTree(
//            dir: "$buildDir/intermediates/classes/debug",
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/BuildConfig.*',
//                       '**/Manifest*.*',
//                       'android/**/*.*',
//                       'com/google/**']
//    )

//    sourceDirectories = files(android.sourceSets.main.getJava().getSrcDirs())
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }

    dependsOn "createDebugCoverageReport"
}